@using Challenge_Fambec.Shared.Models.Entities
@using Challenge_Fambec.Shared.Models.Enums
@using Challenge_Fambec.Client.Services
@inject IProductService ProductService

<style>
    .modal.show {
        display: block !important;
    }
    
    .modal-backdrop.show {
        opacity: 0.5;
    }
    
    .readonly-field {
        background-color: #f8f9fa !important;
        cursor: not-allowed;
    }
    
    .info-label {
        font-weight: 600;
        color: #495057;
    }
    
    .info-value {
        color: #212529;
    }
    
    .empty-value {
        color: #6c757d;
        font-style: italic;
    }
</style>

<div class="modal fade @(IsVisible ? "show" : "")" style="display: @(IsVisible ? "block" : "none");" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Product Details</h5>
                <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (isLoading)
                {
                    <div class="text-center py-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <div class="mt-2">Loading product details...</div>
                    </div>
                }
                else if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @errorMessage
                    </div>
                }
                else if (Product != null)
                {
                    <div class="row">
                        <!-- Basic Information Section -->
                        <div class="col-12 mb-4">
                            <h6 class="text-muted border-bottom pb-2 mb-3">Basic Information</h6>
                            
                            <div class="row">
                                <!-- Product ID -->
                                <div class="col-md-6 mb-3">
                                    <label class="form-label info-label">Product ID</label>
                                    <div class="form-control readonly-field info-value">@Product.Id</div>
                                </div>

                                <!-- Item Code -->
                                <div class="col-md-6 mb-3">
                                    <label class="form-label info-label">Item Code</label>
                                    <div class="form-control readonly-field info-value">@Product.CodItem</div>
                                </div>

                                <!-- Description -->
                                <div class="col-12 mb-3">
                                    <label class="form-label info-label">Description</label>
                                    <div class="form-control readonly-field info-value">@Product.DescrItem</div>
                                </div>

                                <!-- Barcode -->
                                <div class="col-md-6 mb-3">
                                    <label class="form-label info-label">Barcode</label>
                                    <div class="form-control readonly-field @(string.IsNullOrEmpty(Product.CodBarra) ? "empty-value" : "info-value")">
                                        @(string.IsNullOrEmpty(Product.CodBarra) ? "Not specified" : Product.CodBarra)
                                    </div>
                                </div>

                                <!-- Previous Item Code -->
                                <div class="col-md-6 mb-3">
                                    <label class="form-label info-label">Previous Item Code</label>
                                    <div class="form-control readonly-field @(string.IsNullOrEmpty(Product.CodAntItem) ? "empty-value" : "info-value")">
                                        @(string.IsNullOrEmpty(Product.CodAntItem) ? "Not specified" : Product.CodAntItem)
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Classification Section -->
                        <div class="col-12 mb-4">
                            <h6 class="text-muted border-bottom pb-2 mb-3">Classification</h6>
                            
                            <div class="row">
                                <!-- Inventory Unit -->
                                <div class="col-md-6 mb-3">
                                    <label class="form-label info-label">Inventory Unit</label>
                                    <div class="form-control readonly-field info-value">@GetInventoryUnitDisplayName(Product.UnidInv)</div>
                                </div>

                                <!-- Item Type -->
                                <div class="col-md-6 mb-3">
                                    <label class="form-label info-label">Item Type</label>
                                    <div class="form-control readonly-field info-value">@GetTipoItemDisplayName(Product.TipoItem)</div>
                                </div>
                            </div>
                        </div>

                        <!-- Tax Information Section -->
                        <div class="col-12 mb-4">
                            <h6 class="text-muted border-bottom pb-2 mb-3">Tax Information</h6>
                            
                            <div class="row">
                                <!-- NCM Code -->
                                <div class="col-md-6 mb-3">
                                    <label class="form-label info-label">NCM Code</label>
                                    <div class="form-control readonly-field @(string.IsNullOrEmpty(Product.CodNcm) ? "empty-value" : "info-value")">
                                        @(string.IsNullOrEmpty(Product.CodNcm) ? "Not specified" : Product.CodNcm)
                                    </div>
                                </div>

                                <!-- ICMS Rate -->
                                <div class="col-md-6 mb-3">
                                    <label class="form-label info-label">ICMS Rate (%)</label>
                                    <div class="form-control readonly-field @(Product.AliqIcms.HasValue ? "info-value" : "empty-value")">
                                        @if (Product.AliqIcms.HasValue)
                                        {
                                            <span>@Product.AliqIcms.Value.ToString("F2")%</span>
                                        }
                                        else
                                        {
                                            <span>Not specified</span>
                                        }
                                    </div>
                                </div>

                                <!-- IPI Exception -->
                                <div class="col-md-6 mb-3">
                                    <label class="form-label info-label">IPI Exception</label>
                                    <div class="form-control readonly-field @(string.IsNullOrEmpty(Product.ExIpi) ? "empty-value" : "info-value")">
                                        @(string.IsNullOrEmpty(Product.ExIpi) ? "Not specified" : Product.ExIpi)
                                    </div>
                                </div>

                                <!-- Genre Code -->
                                <div class="col-md-6 mb-3">
                                    <label class="form-label info-label">Genre Code</label>
                                    <div class="form-control readonly-field @(string.IsNullOrEmpty(Product.CodGen) ? "empty-value" : "info-value")">
                                        @(string.IsNullOrEmpty(Product.CodGen) ? "Not specified" : Product.CodGen)
                                    </div>
                                </div>

                                <!-- Service List Code -->
                                <div class="col-md-6 mb-3">
                                    <label class="form-label info-label">Service List Code</label>
                                    <div class="form-control readonly-field @(string.IsNullOrEmpty(Product.CodLst) ? "empty-value" : "info-value")">
                                        @(string.IsNullOrEmpty(Product.CodLst) ? "Not specified" : Product.CodLst)
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- System Information Section -->
                        <div class="col-12">
                            <h6 class="text-muted border-bottom pb-2 mb-3">System Information</h6>
                            
                            <div class="row">
                                <!-- Creation Date -->
                                <div class="col-md-6 mb-3">
                                    <label class="form-label info-label">Created Date</label>
                                    <div class="form-control readonly-field info-value">@Product.DataCriacao.ToString("dd/MM/yyyy HH:mm:ss")</div>
                                </div>

                                <!-- Last Update Date -->
                                <div class="col-md-6 mb-3">
                                    <label class="form-label info-label">Last Updated</label>
                                    <div class="form-control readonly-field info-value">@Product.DataAtualizacao.ToString("dd/MM/yyyy HH:mm:ss")</div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
            </div>
        </div>
    </div>
</div>

@if (IsVisible)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public Action<bool>? IsVisibleChanged { get; set; }
    [Parameter] public int ProductId { get; set; }

    private Product? Product;
    private bool isLoading = false;
    private string errorMessage = string.Empty;

    /// <summary>
    /// Called when the component parameters are set
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible && ProductId > 0)
        {
            await LoadProductAsync();
        }
    }

    /// <summary>
    /// Loads product details from the API
    /// </summary>
    private async Task LoadProductAsync()
    {
        if (ProductId <= 0) return;

        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            Product = await ProductService.GetProductByIdAsync(ProductId);
            
            if (Product == null)
            {
                errorMessage = "Product not found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while loading product details: {ex.Message}";
            Console.WriteLine($"Error loading product details: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Closes the modal and resets state
    /// </summary>
    private void CloseModal()
    {
        IsVisible = false;
        IsVisibleChanged?.Invoke(IsVisible);
        ResetModal();
    }

    /// <summary>
    /// Resets the modal to initial state
    /// </summary>
    private void ResetModal()
    {
        Product = null;
        errorMessage = string.Empty;
        isLoading = false;
    }

    /// <summary>
    /// Gets the display name for inventory unit codes
    /// </summary>
    private string GetInventoryUnitDisplayName(string unit)
    {
        return unit switch
        {
            "PC" => "PC - Piece",
            "KG" => "KG - Kilogram",
            "LT" => "LT - Liter",
            "MT" => "MT - Meter",
            "UN" => "UN - Unit",
            "CX" => "CX - Box",
            _ => unit
        };
    }

    /// <summary>
    /// Gets display name for TipoItem enum values
    /// </summary>
    private string GetTipoItemDisplayName(TipoItem tipo)
    {
        return tipo switch
        {
            TipoItem.MercadoriaParaRevenda => "Merchandise for Resale",
            TipoItem.MateriaPrima => "Raw Material",
            TipoItem.Embalagem => "Packaging",
            TipoItem.ProdutoEmProcesso => "Work in Process",
            TipoItem.ProdutoAcabado => "Finished Product",
            TipoItem.Subproduto => "By-product",
            TipoItem.ProdutoIntermediario => "Intermediate Product",
            TipoItem.MaterialDeUsoEConsumo => "Supplies and Consumables",
            TipoItem.AtivoImobilizado => "Fixed Assets",
            TipoItem.Servicos => "Services",
            TipoItem.OutrosInsumos => "Other Inputs",
            TipoItem.Outras => "Others",
            _ => tipo.ToString()
        };
    }
}

@page "/"
@using Challenge_Fambec.Client.Shared
@using Challenge_Fambec.Client.Layout
@using Challenge_Fambec.Shared.Models.Entities
@using Challenge_Fambec.Shared.Models.Enums
@using Challenge_Fambec.Shared.Models
@using Challenge_Fambec.Shared.Models.DTOs
@using Challenge_Fambec.Client.Services
@inject IProductService ProductService

<PageTitle>Home</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="mb-0">Product List</h1>
                <div class="d-flex gap-2 position-relative">
                    <button type="button" class="btn btn-outline-secondary" title="Filter" 
                            @onclick="ToggleFilterSubMenu"
                            style="display: flex; align-items: center; justify-content: center; width: 38px; height: 38px;">
                        <FilterIcon />
                    </button>
                    
                    <ProductFilterSubMenu IsVisible="@showFilterSubMenu" 
                                          IsVisibleChanged="@OnFilterSubMenuVisibilityChanged"
                                          OnFilterChanged="@OnFilterChanged" />
                    
                    <button type="button" class="btn btn-primary" @onclick="OpenNewProductModal">
                        <i class="fas fa-plus me-2"></i>
                        Add Product
                    </button>
                </div>
            </div>
            
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>Item Code</th>
                            <th>Description</th>
                            <th>Type</th>
                            <th>Unit</th>
                            <th>NCM Code</th>
                            <th>ICMS Rate</th>
                            <th>Created</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (isLoading)
                        {
                            <tr>
                                <td colspan="8" class="text-center py-4">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                    <div class="mt-2">Loading products...</div>
                                </td>
                            </tr>
                        }
                        else if (!products.Any())
                        {
                            <tr>
                                <td colspan="8" class="text-center py-4 text-muted">
                                    No products found. Add your first product to get started.
                                </td>
                            </tr>
                        }
                        else
                        {
                            @foreach (var product in products)
                            {
                                <tr>
                                    <td>@product.CodItem</td>
                                    <td>@product.DescrItem</td>
                                    <td>@GetTipoItemDisplayName(product.TipoItem)</td>
                                    <td>@product.UnidInv</td>
                                    <td>@product.CodNcm</td>
                                    <td>
                                        @if (product.AliqIcms.HasValue)
                                        {
                                            <span>@product.AliqIcms.Value.ToString("F2")%</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">N/A</span>
                                        }
                                    </td>
                                    <td>@product.DataCriacao.ToString("dd/MM/yyyy")</td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <button type="button" class="btn btn-sm" title="Details" @onclick="() => ViewProduct(product.Id)">
                                                <EyeIcon Style="width: 1.5rem; height: 1.5rem; stroke: var(--color-secondary);" />
                                            </button>
                                            <button type="button" class="btn btn-sm" title="Edit" @onclick="() => EditProduct(product.Id)">
                                                <PencilIcon Style="width: 1.5rem; height: 1.5rem; fill: var(--color-secondary);" />
                                            </button>
                                            <button type="button" class="btn btn-sm" title="Delete" @onclick="() => DeleteProduct(product.Id)">
                                                <TrashIcon Style="width: 1.25rem; height: 1.25rem; stroke: var(--color-danger);" />
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- New Product Modal -->
<NewProductModal IsVisible="@showNewProductModal" 
                 IsVisibleChanged="@OnModalVisibilityChanged" 
                 OnProductSaved="@OnProductSaved" />

@code {
    private bool showNewProductModal = false;
    private bool showFilterSubMenu = false;
    private bool isLoading = true;
    private ProductFilterOptions currentFilter = new ProductFilterOptions();
    private List<Product> products = new List<Product>();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadProductsAsync();
    }
    
    /// <summary>
    /// Loads products from the API with current filter settings
    /// </summary>
    private async Task LoadProductsAsync()
    {
        isLoading = true;
        StateHasChanged();
        
        try
        {
            // Convert filter options to request DTO
            var filterRequest = new ProductFilterRequest
            {
                CodItem = currentFilter.CodItem,
                DescrItem = currentFilter.DescrItem,
                TipoItems = currentFilter.TipoItems,
                UnidInv = currentFilter.UnidInv,
                CodNcm = currentFilter.CodNcm,
                Page = 1,
                PageSize = 100 // Load more items for better UX
            };
            
            Console.WriteLine($"Filter request TipoItems count: {filterRequest.TipoItems.Count}");
            foreach (var tipo in filterRequest.TipoItems)
            {
                Console.WriteLine($"Filter request TipoItem: {tipo} ({(int)tipo})");
            }
            
            products = await ProductService.GetProductsAsync(filterRequest);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading products: {ex.Message}");
            products = new List<Product>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Opens the new product modal
    /// </summary>
    private void OpenNewProductModal()
    {
        showNewProductModal = true;
    }

    /// <summary>
    /// Handles modal visibility changes
    /// </summary>
    private void OnModalVisibilityChanged(bool isVisible)
    {
        showNewProductModal = isVisible;
    }

    /// <summary>
    /// Handles when a new product is saved
    /// </summary>
    private void OnProductSaved(Product newProduct)
    {
        // Reload products to show the new one
        _ = LoadProductsAsync();
    }
    
    /// <summary>
    /// Toggles the filter submenu visibility
    /// </summary>
    private void ToggleFilterSubMenu()
    {
        showFilterSubMenu = !showFilterSubMenu;
    }
    
    /// <summary>
    /// Handles filter submenu visibility changes
    /// </summary>
    private void OnFilterSubMenuVisibilityChanged(bool isVisible)
    {
        showFilterSubMenu = isVisible;
    }
    
    /// <summary>
    /// Handles filter changes and reloads products
    /// </summary>
    private async Task OnFilterChanged(ProductFilterOptions filterOptions)
    {
        currentFilter = filterOptions;
        await LoadProductsAsync();
    }
    
    /// <summary>
    /// Views product details
    /// </summary>
    private void ViewProduct(int productId)
    {
        // TODO: Implement product details view
        Console.WriteLine($"View product: {productId}");
    }
    
    /// <summary>
    /// Edits a product
    /// </summary>
    private void EditProduct(int productId)
    {
        // TODO: Implement product editing
        Console.WriteLine($"Edit product: {productId}");
    }
    
    /// <summary>
    /// Deletes a product with confirmation
    /// </summary>
    private async Task DeleteProduct(int productId)
    {
        // TODO: Add confirmation dialog
        var confirmed = true; // For now, assume confirmed
        
        if (confirmed)
        {
            try
            {
                var success = await ProductService.DeleteProductAsync(productId);
                if (success)
                {
                    await LoadProductsAsync(); // Reload products
                }
                else
                {
                    Console.WriteLine("Failed to delete product");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting product: {ex.Message}");
            }
        }
    }
    
    /// <summary>
    /// Gets the display name for TipoItem enum
    /// </summary>
    private string GetTipoItemDisplayName(TipoItem tipo)
    {
        return tipo switch
        {
            TipoItem.MercadoriaParaRevenda => "Merchandise for Resale",
            TipoItem.MateriaPrima => "Raw Material",
            TipoItem.Embalagem => "Packaging",
            TipoItem.ProdutoEmProcesso => "Work in Process",
            TipoItem.ProdutoAcabado => "Finished Product",
            TipoItem.Subproduto => "By-product",
            TipoItem.ProdutoIntermediario => "Intermediate Product",
            TipoItem.MaterialDeUsoEConsumo => "Supplies and Consumables",
            TipoItem.AtivoImobilizado => "Fixed Assets",
            TipoItem.Servicos => "Services",
            TipoItem.OutrosInsumos => "Other Inputs",
            TipoItem.Outras => "Others",
            _ => tipo.ToString()
        };
    }
}
